AWSTemplateFormatVersion: '2010-09-09'
Description: Plantilla de AWS CloudFormation para crear un clúster de Amazon EKS utilizando una configuración detallada de VPC.

Parameters:

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: El rango CIDR para la VPC. Este debe ser un rango CIDR privado válido (RFC 1918).

  PublicSubnet01Block:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock para la subred pública 01 dentro de la VPC.

  PublicSubnet02Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock para la subred pública 02 dentro de la VPC.

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock para la subred privada 01 dentro de la VPC.

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock para la subred privada 02 dentro de la VPC.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: eks-devops-VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: eks-devops-Public-RouteTable

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: eks-devops-Private-RouteTable-AZ1

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: eks-devops-Private-RouteTable-AZ2

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: eks-devops-NatGateway-AZ1

  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: eks-devops-NatGateway-AZ2

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: eks-devops-PublicSubnet01
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: eks-devops-PublicSubnet02
        - Key: kubernetes.io/role/elb
          Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: eks-devops-PrivateSubnet01
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: eks-devops-PrivateSubnet02
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad para la comunicación del plano de control del clúster EKS.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Permitir comunicación del plano de control con los nodos
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # Permitir tráfico entre nodos (puertos necesarios para kubelet y kube-proxy)
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        # Permitir tráfico de DNS (UDP)
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # Permitir todo el tráfico de salida
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad para los nodos del clúster EKS.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Permitir tráfico entre nodos
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        # Permitir tráfico de DNS (UDP)
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # Permitir todo el tráfico de salida
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: eks-devops
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet01
          - !Ref PublicSubnet02
          - !Ref PrivateSubnet01
          - !Ref PrivateSubnet02
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
      RoleArn: !GetAtt EKSClusterRole.Arn

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      ScalingConfig:
        MinSize: 2
        MaxSize: 4
        DesiredSize: 2
      AmiType: AL2_x86_64
      InstanceTypes:
        - t3.medium
      DiskSize: 20
      Labels:
        Name: eks-devops-nodes
      Tags:
        Name: eks-devops-nodes

  VPCControllerAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: vpc-cni
      AddonVersion: "v1.19.0-eksbuild.1"
      ResolveConflicts: OVERWRITE

Outputs:
  SubnetIds:
    Description: IDs de las subredes en la VPC.
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PrivateSubnet01, !Ref PrivateSubnet02 ] ]

  SecurityGroups:
    Description: Grupo de seguridad para la comunicación entre el plano de control y los nodos del clúster.
    Value: !Join [ ",", [ !Ref ClusterSecurityGroup ] ]

  NodeSecurityGroupId:
    Description: ID del Grupo de Seguridad para los Nodos.
    Value: !Ref NodeSecurityGroup

  VpcId:
    Description: ID de la VPC.
    Value: !Ref VPC

  PublicSubnet01Id:
    Description: ID de la Subred Pública 01.
    Value: !Ref PublicSubnet01

  PublicSubnet02Id:
    Description: ID de la Subred Pública 02.
    Value: !Ref PublicSubnet02

  PrivateSubnet01Id:
    Description: ID de la Subred Privada 01.
    Value: !Ref PrivateSubnet01

  PrivateSubnet02Id:
    Description: ID de la Subred Privada 02.
    Value: !Ref PrivateSubnet02

  InternetGatewayId:
    Description: ID del Gateway de Internet.
    Value: !Ref InternetGateway

  PublicRouteTableId:
    Description: ID de la Tabla de Rutas Pública.
    Value: !Ref PublicRouteTable

  PrivateRouteTable01Id:
    Description: ID de la Tabla de Rutas Privada 01.
    Value: !Ref PrivateRouteTable01

  PrivateRouteTable02Id:
    Description: ID de la Tabla de Rutas Privada 02.
    Value: !Ref PrivateRouteTable02

  NatGateway01Id:
    Description: ID del NAT Gateway 01.
    Value: !Ref NatGateway01

  NatGateway02Id:
    Description: ID del NAT Gateway 02.
    Value: !Ref NatGateway02

  EKSClusterName:
    Description: Nombre del Clúster EKS.
    Value: eks-devops

  EKSClusterArn:
    Description: ARN del Clúster EKS.
    Value: !GetAtt EKSCluster.Arn

  NodeGroupName:
    Description: Nombre del Grupo de Nodos.
    Value: !Ref NodeGroup

  NodeInstanceRoleArn:
    Description: ARN del Rol IAM para el Grupo de Nodos.
    Value: !GetAtt NodeInstanceRole.Arn